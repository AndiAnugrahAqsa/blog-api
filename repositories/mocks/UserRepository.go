// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "mini-project/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: userRequest
func (_m *UserRepository) Create(userRequest models.UserRequest) models.User {
	ret := _m.Called(userRequest)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.UserRequest) models.User); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *UserRepository) Delete(id int) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UserRepository) GetAll() []models.User {
	ret := _m.Called()

	var r0 []models.User
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepository) GetByID(id int) models.User {
	ret := _m.Called(id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(int) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// Login provides a mock function with given fields: userRequest
func (_m *UserRepository) Login(userRequest models.UserRequest) models.User {
	ret := _m.Called(userRequest)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.UserRequest) models.User); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// Update provides a mock function with given fields: id, userRequest
func (_m *UserRepository) Update(id int, userRequest models.UserRequest) models.User {
	ret := _m.Called(id, userRequest)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(int, models.UserRequest) models.User); ok {
		r0 = rf(id, userRequest)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
