// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "mini-project/models"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: commentRequest
func (_m *CommentRepository) Create(commentRequest models.CommentRequest) models.Comment {
	ret := _m.Called(commentRequest)

	var r0 models.Comment
	if rf, ok := ret.Get(0).(func(models.CommentRequest) models.Comment); ok {
		r0 = rf(commentRequest)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *CommentRepository) Delete(id int) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *CommentRepository) GetAll() []models.Comment {
	ret := _m.Called()

	var r0 []models.Comment
	if rf, ok := ret.Get(0).(func() []models.Comment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	return r0
}

// GetByBlogID provides a mock function with given fields: blog_id
func (_m *CommentRepository) GetByBlogID(blog_id int) []models.Comment {
	ret := _m.Called(blog_id)

	var r0 []models.Comment
	if rf, ok := ret.Get(0).(func(int) []models.Comment); ok {
		r0 = rf(blog_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *CommentRepository) GetByID(id int) models.Comment {
	ret := _m.Called(id)

	var r0 models.Comment
	if rf, ok := ret.Get(0).(func(int) models.Comment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	return r0
}

// Update provides a mock function with given fields: id, commentRequest
func (_m *CommentRepository) Update(id int, commentRequest models.CommentRequest) models.Comment {
	ret := _m.Called(id, commentRequest)

	var r0 models.Comment
	if rf, ok := ret.Get(0).(func(int, models.CommentRequest) models.Comment); ok {
		r0 = rf(id, commentRequest)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	return r0
}

type mockConstructorTestingTNewCommentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentRepository(t mockConstructorTestingTNewCommentRepository) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
