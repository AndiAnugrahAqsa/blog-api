// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "mini-project/models"

	mock "github.com/stretchr/testify/mock"
)

// LikeRepository is an autogenerated mock type for the LikeRepository type
type LikeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: likeRequest
func (_m *LikeRepository) Create(likeRequest models.LikeRequest) models.Like {
	ret := _m.Called(likeRequest)

	var r0 models.Like
	if rf, ok := ret.Get(0).(func(models.LikeRequest) models.Like); ok {
		r0 = rf(likeRequest)
	} else {
		r0 = ret.Get(0).(models.Like)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *LikeRepository) Delete(id int) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *LikeRepository) GetAll() []models.Like {
	ret := _m.Called()

	var r0 []models.Like
	if rf, ok := ret.Get(0).(func() []models.Like); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Like)
		}
	}

	return r0
}

// GetByBlogID provides a mock function with given fields: id
func (_m *LikeRepository) GetByBlogID(id int) []models.Like {
	ret := _m.Called(id)

	var r0 []models.Like
	if rf, ok := ret.Get(0).(func(int) []models.Like); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Like)
		}
	}

	return r0
}

type mockConstructorTestingTNewLikeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLikeRepository creates a new instance of LikeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLikeRepository(t mockConstructorTestingTNewLikeRepository) *LikeRepository {
	mock := &LikeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
